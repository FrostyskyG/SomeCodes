#! /usr/bin/env python
trans_dict={
	# Chars
	'a': '(![]+[])[+!+[]]',
	'c': '([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]',
	'd': '([][[]]+[])[+!+[]+!+[]]',
	'e': '(!![]+[])[!+[]+!+[]+!+[]]',
	'f': '(![]+[])[+[]]',
	'i': '([][[]]+[])[+!+[]+!+[]+!+[]+!+[]+!+[]]',
	'l': '(![]+[])[!+[]+!+[]]',
	'n': '([][[]]+[])[+!+[]]',
	'o': '([][(![]+[])[+[]]+([][[]]+[])[+!+[]+!+[]+!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!![]+!![]+!![]+!![]+!![]+!![]]',
	'r': '(!![]+[])[+!+[]]',
	's': '(![]+[])[!+[]+!+[]+!+[]]',
	't': '(!![]+[])[+[]]',
	'u': '([][[]]+[])[+[]]',
	# Number
	0: '+[]',
	1: '+!![]',
	# Symbol
	'(': '([][(![]+[])[+[]]+([][[]]+[])[+!+[]+!+[]+!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]]',
	')': '([][(![]+[])[+[]]+([][[]]+[])[+!+[]+!+[]+!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]]',
	' ': '([][(![]+[])[+[]]+([][[]]+[])[+!+[]+!+[]+!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]]',
	'[': '([][(![]+[])[+[]]+([][[]]+[])[+!+[]+!+[]+!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]]',
	']': '([][(![]+[])[+[]]+([][[]]+[])[+!+[]+!+[]+!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]]',
	'{': '([][(![]+[])[+[]]+([][[]]+[])[+!+[]+!+[]+!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]]',
	'}': '([][(![]+[])[+[]]+([][[]]+[])[+!+[]+!+[]+!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]]',
	# Placeholder
	'#':'#'
}

def JF(string):
	return '+'.join([JF_char(c) for c in string])

def JF_char(c):
	if c in trans_dict:
		return trans_dict[c]
	try:
		i=int(c)
		return '('+JF_n(i)+')'
	except Exception, e:
		return '# Unexcept Char #'

def JF_n(n):
	if n<=1: return trans_dict[n]
	else:
		return '+'.join(['!![]']*n)

def JF_eval(code):
	template='[][filter][constructor]('+code+')()'
	return reduce(lambda t,s: t.replace(s,JF(s)),[template,'filter','constructor',code])

if __name__ == '__main__':
	code='alert(1)'
	print code
	print JF_eval(code)